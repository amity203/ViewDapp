{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/web3hook.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport {DashboardComponent} from './dashboard/dashboard.component';\n\nconst routes: Routes = [\n  { path: 'dashboard', component: DashboardComponent }\n];\n\n@NgModule({\n  exports: [ RouterModule ],\n  imports: [ RouterModule.forRoot(routes) ]\n})\n\nexport class AppRoutingModule {\n\n  \n\n}\n\n","module.exports = \".example-icon {\\n    padding: 0 14px;\\n  }\\n  \\n  .example-spacer {\\n    flex: 1 1 auto;\\n  }\\n  \\n  .example-card {\\n    max-width: 400px;\\n  }\\n  \\n  .example-header-image {\\n    background-image: url('https://material.angular.io/{{ipfsId}}/img/examples/shiba1.jpg');\\n    background-size: cover;\\n  }\"","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n<mat-toolbar-row>\\n    <a routerLink=\\\"/\\\"><h1>{{title}}</h1></a><span class=\\\"example-spacer\\\"></span><span>Immortal Images</span>\\n    <span class=\\\"example-spacer\\\"></span>\\n    <a routerLink=\\\"/dashboard\\\">Dashboard</a>\\n  </mat-toolbar-row>\\n  <!-- <mat-card>\\n    <input type=\\\"file\\\" name=\\\"file\\\" accept=\\\"image/*\\\"  id=\\\"file\\\" style=\\\"display: none\\\" (change)=\\\"captureFile($event)\\\">\\n    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"triggerFileUpload()\\\">Select File</button>\\n    <hr>\\n    <div  *ngIf=\\\"loading\\\"><mat-spinner></mat-spinner></div>\\n    \\n    {{ipfsId}}\\n  </mat-card> -->\\n</mat-toolbar>\\n\\n  <!-- <img [src]= \\\"'https://ipfs.io/ipfs/' + {{ipfsId}}\\\" width=\\\"42\\\" height=\\\"42\\\" /> -->\\n  \\n  <p>IPFS Hash Generated= {{ipfsId}}\\\"</p>\\n\\n\\n<mat-card class=\\\"example-card\\\">\\n  <mat-card-header>\\n    <div mat-card-avatar class=\\\"example-header-image\\\"></div>\\n    <mat-card-title>Shiba Inu</mat-card-title>\\n    <mat-card-subtitle>Dog Breed</mat-card-subtitle>\\n  </mat-card-header>\\n  <img mat-card-image src=\\\"{{ipfsId}}\\\" alt=\\\"Photo of a Shiba Inu\\\">\\n  <mat-card-content>\\n    <p>\\n      The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\\n      A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\\n      bred for hunting.\\n    </p>\\n  </mat-card-content>\\n  <mat-card-actions>\\n    <button mat-button>LIKE</button>\\n    <button mat-button>SHARE</button>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<router-outlet></router-outlet>\"","\nimport { Component, OnInit } from '@angular/core';\nimport { Buffer } from 'buffer';\nimport { IpfsService } from './ipfs.service';\ndeclare let window: any;\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  title = 'viewdapp';\n  imageUrl: string;\n  ipfsApi: any ;\n  ipfsId: string;\n  loading: boolean;\n  ngOnInit(): void {\n    this.ipfsApi = window.IpfsApi({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n  }\n \n\n  captureFile(event) {\n    const files = event.target.files;\n    const filename = files[0].name;\n    if (filename.lastIndexOf('.') <= 0) {\n      alert('Error');\n    }\n\n    const reader = new FileReader();\n    reader.onloadend = () => this.saveToIpfs(reader);\n    reader.readAsArrayBuffer(files[0]);\n  }\n\n  saveToIpfs (reader) {\n    this.loading = true;\n    console.log(reader);\n    const buffer = Buffer.from(reader.result);\n\n    this.ipfsApi.add(buffer, { progress: (prog) => console.log(`received: ${prog}`) })\n      .then((response) => {\n        console.log(response);\n        this.ipfsId = \"https://ipfs.io/ipfs/\"+response[0].hash;\n      }).catch((err) => {\n        console.error(err);\n      });\n      this.loading = false;\n  }\n\n  triggerFileUpload() {\n    document.getElementById('file').click();\n  }\n}\n\n","\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatToolbarModule} from '@angular/material/toolbar'\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './/app-routing.module';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DashboardComponent\n  ],\n  imports: [BrowserAnimationsModule,MatProgressSpinnerModule,MatProgressBarModule,MatCardModule,MatToolbarModule,AppRoutingModule,\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \".example-card {\\n    max-width: 400px;\\n  }\\n  \\n  .example-header-image {\\n    background-image: url('https://material.angular.io/assets/img/examples/shiba1.jpg');\\n    background-size: cover;\\n  }\"","module.exports = \"<mat-card class=\\\"example-card\\\">\\n    <mat-card-header>\\n      <div mat-card-avatar class=\\\"example-header-image\\\"></div>\\n      <mat-card-title>Shiba Inu</mat-card-title>\\n      <mat-card-subtitle>Dog Breed</mat-card-subtitle>\\n    </mat-card-header>\\n    <img mat-card-image src=\\\"https://material.angular.io/assets/img/examples/shiba2.jpg\\\" alt=\\\"Photo of a Shiba Inu\\\">\\n    <mat-card-content>\\n      <p>\\n        The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\\n        A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\\n        bred for hunting.\\n      </p>\\n    </mat-card-content>\\n    <mat-card-actions>\\n      <button mat-button>LIKE</button>\\n      <button mat-button>SHARE</button>\\n    </mat-card-actions>\\n  </mat-card>\\n\\n  <mat-card class=\\\"example-card\\\">\\n      <mat-card-header>\\n        <div mat-card-avatar class=\\\"example-header-image\\\"></div>\\n        <mat-card-title>Shiba Inu</mat-card-title>\\n        <mat-card-subtitle>Dog Breed</mat-card-subtitle>\\n      </mat-card-header>\\n      <img mat-card-image src=\\\"https://material.angular.io/assets/img/examples/shiba2.jpg\\\" alt=\\\"Photo of a Shiba Inu\\\">\\n      <mat-card-content>\\n        <p>\\n          The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\\n          A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\\n          bred for hunting.\\n        </p>\\n      </mat-card-content>\\n      <mat-card-actions>\\n        <button mat-button>LIKE</button>\\n        <button mat-button>SHARE</button>\\n      </mat-card-actions>\\n    </mat-card>\\n\\n    <mat-card class=\\\"example-card\\\">\\n        <mat-card-header>\\n          <div mat-card-avatar class=\\\"example-header-image\\\"></div>\\n          <mat-card-title>Shiba Inu</mat-card-title>\\n          <mat-card-subtitle>Dog Breed</mat-card-subtitle>\\n        </mat-card-header>\\n        <img mat-card-image src=\\\"https://material.angular.io/assets/img/examples/shiba2.jpg\\\" alt=\\\"Photo of a Shiba Inu\\\">\\n        <mat-card-content>\\n          <p>\\n            The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\\n            A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\\n            bred for hunting.\\n          </p>\\n        </mat-card-content>\\n        <mat-card-actions>\\n          <button mat-button>LIKE</button>\\n          <button mat-button>SHARE</button>\\n        </mat-card-actions>\\n      </mat-card>\\n\\n      <mat-card class=\\\"example-card\\\">\\n          <mat-card-header>\\n            <div mat-card-avatar class=\\\"example-header-image\\\"></div>\\n            <mat-card-title>Shiba Inu</mat-card-title>\\n            <mat-card-subtitle>Dog Breed</mat-card-subtitle>\\n          </mat-card-header>\\n          <img mat-card-image src=\\\"https://material.angular.io/assets/img/examples/shiba2.jpg\\\" alt=\\\"Photo of a Shiba Inu\\\">\\n          <mat-card-content>\\n            <p>\\n              The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\\n              A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\\n              bred for hunting.\\n            </p>\\n          </mat-card-content>\\n          <mat-card-actions>\\n            <button mat-button>LIKE</button>\\n            <button mat-button>SHARE</button>\\n          </mat-card-actions>\\n        </mat-card>\"","import { Component, OnInit } from '@angular/core';\nimport {Web3hookService} from '../web3hook.service';\nimport { MatSnackBar } from '@angular/material';\ndeclare let require: any;\nconst ImageStore_artifacts = require('../../../build/contracts/ImageStore.json');\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  accounts: string[];\n  ImageStore: any;\n  ipfsId: string;\n\n  constructor(private web3Service: Web3hookService, private matSnackBar: MatSnackBar) {\n    console.log('Constructor: ' + web3Service);\n  }\n\n  ngOnInit(): void {\n    console.log('OnInit: ' + this.web3Service);\n    console.log(this);\n    //this.watchAccount();\n    this.web3Service.artifactsToContract(ImageStore_artifacts)\n      .then((MetaCoinAbstraction) => {\n        this.ImageStore = MetaCoinAbstraction;\n      });\n  }\n\n\n  setStatus(status) {\n    this.matSnackBar.open(status, null, {duration: 3000});\n  }\n\n  async fetchimages() {\n    if (!this.ImageStore) {\n      this.setStatus('ImageStore is not loaded, unable to do transaction');\n      return;\n    }\n\n    // const amount = this.model.amount;\n    // const receiver = this.model.receiver;\n\n    //console.log('Sending coins' + amount + ' to ' + receiver);\n\n    this.setStatus('Initiating transaction... (please wait)');\n    try {\n      const deployedImageStore = await this.ImageStore.deployed();\n      const transaction = await deployedImageStore.getimages(0);\n\n      if (!transaction) {\n        this.setStatus('Transaction failed!');\n      } else {\n        this.setStatus('Transaction complete!');\n        console.log(transaction);\n        \n      }\n    } catch (e) {\n      console.log(e);\n      this.setStatus('Error sending coin; see log.');\n    }\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport * as contract from 'truffle-contract';\nimport {Subject} from 'rxjs/Rx';\ndeclare let require: any;\nconst Web3 = require('web3');\n\n\ndeclare let window: any;\n\n@Injectable()\nexport class Web3hookService{\n  private web3: any;\n  private accounts: string[];\n  public ready = false;\n  public MetaCoin: any;\n  public accountsObservable = new Subject<string[]>();\n\n  constructor() {\n    window.addEventListener('load', (event) => {\n      this.bootstrapWeb3();\n    });\n  }\n\n  public bootstrapWeb3() {\n    // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n    if (typeof window.web3 !== 'undefined') {\n      // Use Mist/MetaMask's provider\n      this.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      console.log('No web3? You should consider trying MetaMask!');\n\n      // Hack to provide backwards compatibility for Truffle, which uses web3js 0.20.x\n      Web3.providers.HttpProvider.prototype.sendAsync = Web3.providers.HttpProvider.prototype.send;\n      // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n      this.web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\n    }\n\n    setInterval(() => this.refreshAccounts(), 100);\n  }\n\n  public async artifactsToContract(artifacts) {\n    if (!this.web3) {\n      const delay = new Promise(resolve => setTimeout(resolve, 100));\n      await delay;\n      return await this.artifactsToContract(artifacts);\n    }\n\n    const contractAbstraction = contract(artifacts);\n    contractAbstraction.setProvider(this.web3.currentProvider);\n    return contractAbstraction;\n\n  }\n\n  private refreshAccounts() {\n    this.web3.eth.getAccounts((err, accs) => {\n      console.log('Refreshing accounts');\n      if (err != null) {\n        console.warn('There was an error fetching your accounts.');\n        return;\n      }\n\n      // Get the initial account balance so it can be displayed.\n      if (accs.length === 0) {\n        console.warn('Couldn\\'t get any accounts! Make sure your Ethereum client is configured correctly.');\n        return;\n      }\n\n      if (!this.accounts || this.accounts.length !== accs.length || this.accounts[0] !== accs[0]) {\n        console.log('Observed new accounts');\n\n        this.accountsObservable.next(accs);\n        this.accounts = accs;\n      }\n\n      this.ready = true;\n    });\n  }\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}