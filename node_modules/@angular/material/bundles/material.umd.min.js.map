{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  CdkNestedTreeNode,\n  CdkTree,\n  CdkTreeNode,\n  CdkTreeNodeDef,\n} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList\n} from '@angular/core';\nimport {CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n\nexport const _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\nexport const _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {CdkTree} from '@angular/cdk/tree';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange!,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('6.4.3');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {}\n\n  ngOnDestroy() {\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top'},\n        {originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom'}\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n  A,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableRipple,\n  CanUpdateErrorState,\n  ErrorStateMatcher,\n  HasTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select panel has been toggled. */\n   @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this._panelDoneAnimating = false;\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange!.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n        keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(option => !option.selected);\n      this.options.forEach(option => hasDeselectedOptions ? option.select() : option.deselect());\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => options.indexOf(a) - options.indexOf(b));\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  ScrollDispatcher,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions) {\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && element.style['webkitUserDrag'] === 'none') {\n      element.style['webkitUserDrag'] = '';\n    }\n\n    _focusMonitor.monitor(element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) =>\n        this._elementRef.nativeElement.removeEventListener(event, listener));\n\n      this._manualListeners.clear();\n    }\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabContent} from './tab-content';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  readonly _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  readonly _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 7.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe(dir => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin !== undefined) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 7.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 7.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 7.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef.nativeElement);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n\n  focus() {\n    this._getHostElement().focus();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: 'edit' | 'done' | 'number';\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkStep, CdkStepper, StepContentPositionState} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  ngAfterContentInit() {\n    const icons = this._icons.toArray();\n\n    ['edit', 'done', 'number'].forEach(name => {\n      const override = icons.find(icon => icon.name === name);\n\n      if (override) {\n        this._iconOverrides[name] = override.templateRef;\n      }\n    });\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n\n  _animationDone(event: AnimationEvent) {\n    if ((event.toState as StepContentPositionState) === 'current') {\n      this.animationDone.emit();\n    }\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  IterableDiffers,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {Directionality} from '@angular/cdk/bidi';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n\n  // TODO(andrewseguin): Remove this explicitly set constructor when the compiler knows how to\n  // properly build the es6 version of the class. Currently sets ctorParameters to empty due to a\n  // fixed bug.\n  // https://github.com/angular/tsickle/pull/760 - tsickle PR that fixed this\n  // https://github.com/angular/angular/pull/23531 - updates compiler-cli to fixed version\n  constructor(protected _differs: IterableDiffers,\n              protected _changeDetectorRef: ChangeDetectorRef,\n              protected _elementRef: ElementRef,\n              @Attribute('role') role: string,\n              @Optional() protected readonly _dir: Directionality) {\n    super(_differs, _changeDetectorRef, _elementRef, role, _dir);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null> = this._sort ?\n        merge<Sort>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null> = this._paginator ?\n        merge<PageEvent>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._invertMouseCoords ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 7.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(`${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible-top, void => visible-bottom',\n      animate(`${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, HasInitialized, mixinDisabled, mixinInitialized} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError\n} from './sort-errors';\nimport {Subject} from 'rxjs';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {debounceTime, filter, map, startWith, take, takeUntil} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent(this._elementRef.nativeElement, 'keydown').pipe(\n            filter((event: KeyboardEvent) => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe((event) => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef<HTMLElement>;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef<HTMLElement>;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event always fire when user toggle the slide toggle, but does not mean the slide toggle's\n   * value is changed. The event does not fire when user drag to change the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event always fire when user drag the slide toggle to make a change that greater than 50%.\n   * It does not mean the slide toggle's value is changed. The event does not fire when user toggle\n   * the slide toggle to change the slide toggle's value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 7.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this.onTouched());\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n  constructor(public _elementRef: ElementRef,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() location?: Location) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n    // because named route URLs can contain parentheses (see #12338).\n    this._rectangleFillValue = `url('${location ? location.path() : ''}#${this.progressbarId}')`;\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Inject,\n  Input,\n  ElementRef,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-changes 7.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      'transform': 'translate3d(0, 0, 0)',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {HasInitialized, mixinInitialized} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 7.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase = mixinInitialized(MatPaginatorBase);\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages();\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = this.getNumberOfPages();\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    return Math.ceil(this.length / this.pageSize) - 1;\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  sequence,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    transition('void => enter', sequence([\n      query('.mat-menu-content', style({opacity: 0})),\n      animate('100ms linear', style({opacity: 1, transform: 'scale(1, 0.5)'})),\n      group([\n        query('.mat-menu-content', animate('400ms cubic-bezier(0.55, 0, 0.55, 0.2)',\n          style({opacity: 1})\n        )),\n        animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)', style({transform: 'scale(1, 1)'})),\n      ])\n    ])),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 7.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: true,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 7.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 7.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 7.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 7.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 7.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 7.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._portal);\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedByMouse = true;\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          this.menu._animationDone\n            .pipe(take(1), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  animateChild,\n  group,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', group([\n      query('@fadeInContent', animateChild()),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[class.mat-list-item-with-avatar]': '_avatar',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange!.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!this.disabled) {\n          this._toggleSelectOnFocusedOption();\n\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleSelectOnFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => {\n        return this.options.find(option =>\n            this.compareWith ? this.compareWith(option.value, value) : option.value === value);\n      })\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 7.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    // TODO: consider turning the setter into a function, it doesn't do anything as a class.\n    // tslint:disable-next-line:no-unused-expression\n    new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n  group,\n  query,\n  animateChild,\n} from '@angular/animations';\n\n/** Animations used by the Material datepicker. */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({opacity: 0, transform: 'scale(1, 0)'})),\n    state('enter', style({opacity: 1, transform: 'scale(1, 1)'})),\n    transition('void => enter', group([\n      query('@fadeInCalendar', animateChild()),\n      animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ])),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n    transition('void => *', animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {take, filter} from 'rxjs/operators';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {CanColor, DateAdapter, mixinColor, ThemePalette} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase = mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n        this.value = selected;\n        this._cvaOnChange(selected);\n        this._onTouched();\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette() {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordion} from './accordion';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MatAccordion, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem\n    implements AfterContentInit, OnChanges, OnDestroy {\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @SkipSelf() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n\n  _bodyAnimation(event: AnimationEvent) {\n    const classList = event.element.classList;\n    const cssClass = 'mat-expanded';\n    const {phaseName, toState} = event;\n\n    // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n    // order to prevent the cases where switching too early would cause the animation to jump.\n    // Note that we do it directly on the DOM element to avoid the slight delay that comes\n    // with doing it via change detection.\n    if (phaseName === 'done' && toState === 'expanded') {\n      classList.add(cssClass);\n    } else if (phaseName === 'start' && toState === 'collapsed') {\n      classList.remove(cssClass);\n    }\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subscription} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this.chips.some(chip => chip._hasFocus);\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n    }\n\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._elementRef.nativeElement.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    const chipsArray = this.chips.toArray();\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0 && (this.focused ||\n      (this._keyManager.activeItem && chipsArray.indexOf(this._keyManager.activeItem) === -1))) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      const focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    this._keyManager.setActiveItem(-1);\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Input, Output, Inject, OnChanges} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.placeholder]': 'placeholder || null',\n  }\n})\nexport class MatChipInput implements OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject, Subscription, SubscriptionLike} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClose.next(this._result);\n      this._beforeClose.complete();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): ()  => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 7.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n  NgZone,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {CanUpdateErrorState, ErrorStateMatcher, mixinErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n              private _autofillMonitor: AutofillMonitor,\n              ngZone: NgZone) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnInit() {\n    this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n      this.autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n    this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    if (value != this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n\n      // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n      // Angular does not expect events to be raised during change detection, so any state change\n      // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n      // See https://github.com/angular/angular/issues/17793. To work around this, we defer telling\n      // the form control it has been touched until the next tick.\n      Promise.resolve().then(() => this._onTouched());\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase =\n    mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      // TODO(paul): Once the speedFactor is removed, we no longer need to copy each single option.\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/** Default color palette for flat buttons (mat-flat-button) */\nconst DEFAULT_FLAT_BUTTON_COLOR = 'primary';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 7.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 7.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    } else if (this._hasHostAttributes('mat-flat-button')) {\n      this.color = DEFAULT_FLAT_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 7.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {SelectionModel} from '@angular/cdk/collections';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 7.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  inputs: ['disabled'],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements\n  ControlValueAccessor, CanDisable, OnInit, AfterContentInit {\n\n  private _vertical = false;\n  private _multiple = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exaclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor) {\n    super();\n\n    this.buttonToggleGroup = toggleGroup;\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {Directive, ElementRef, Inject, Input, NgZone, OnDestroy, Optional} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n\nlet nextId = 0;\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n  },\n})\nexport class MatBadge implements OnDestroy {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef,\n      private _ariaDescriber: AriaDescriber) {}\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._document.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /** Whether the bottom sheet should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'visible') {\n      this._trapFocus();\n    } else if (event.toState === 'hidden') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject, SubscriptionLike, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: SubscriptionLike = Subscription.EMPTY;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._locationChanges.unsubscribe();\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n\n    if (location) {\n      this._locationChanges = location.subscribe(() => {\n        if (containerInstance.bottomSheetConfig.closeOnNavigation) {\n          this.dismiss();\n        }\n      });\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf, TemplateRef} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config = _applyConfigDefaults(config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...new MatBottomSheetConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {EMPTY, fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n    '../input/input.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n  }\n  set appearance(value: MatFormFieldAppearance) {\n    // If we're switching to `outline` from another appearance, we have to recalculate the gap.\n    if (value !== this._appearance && value === 'outline') {\n      this._initialGapCalculated = false;\n    }\n\n    this._appearance = value;\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  _outlineGapWidth = 0;\n  _outlineGapStart = 0;\n  _initialGapCalculated = false;\n\n  /**\n   * @deprecated\n   * @breaking-change 7.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaultOptions:\n          MatFormFieldDefaultOptions,\n      // @breaking-change 7.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value, prefix, or suffix changes.\n    const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n    merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n\n    if (!this._initialGapCalculated) {\n      // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n      if (this._ngZone) {\n        // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n        // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n        // wasn't flipped on for some reason.\n        this._ngZone.runOutsideAngular(() => {\n          Promise.resolve().then(() => this.updateOutlineGap());\n        });\n      } else {\n        Promise.resolve().then(() => this.updateOutlineGap());\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n      if (this._platform && !this._platform.isBrowser) {\n        // getBoundingClientRect isn't available on the server.\n        this._initialGapCalculated = true;\n        return;\n      }\n      if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n        return;\n      }\n\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(\n          this._label.nativeElement.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n      for (const child of this._label.nativeElement.children) {\n        labelWidth += child.offsetWidth;\n      }\n      this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n      this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n    } else {\n      this._outlineGapStart = 0;\n      this._outlineGapWidth = 0;\n    }\n    this._initialGapCalculated = true;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [CommonModule],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (this._document && this._document.body && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    Constructor<HasInitialized> & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n  /**\n   * @deprecated Use the `animation` property instead.\n   * @breaking-change 7.0.0\n   */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 7.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   * @breaking-change 7.0.0\n   */\n  baseSpeedFactor?: number;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   * @breaking-change 7.0.0\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["inputs","host","class","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","type","undefined","decorators","Inject","args","DOCUMENT","MatToolbar","propDecorators","NgModule","imports","MatCommonModule","exports","MatToolbarRow","declarations","MatToolbarModule","MatTreeNodeOutlet","viewContainer","this","Directive","selector","ViewContainerRef","_MatTreeNodeMixinBase","mixinTabIndex","mixinDisabled","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_elementRef","_tree","tabIndex","_this","_super","call","role","Number","tslib_1.__extends","exportAs","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","Attribute","Input","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","prototype","ngAfterContentInit","ngOnDestroy","IterableDiffers","node","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","Component","template","styles","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","CommonModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","Object","defineProperty","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","MatInkBar","hide","nativeElement","style","visibility","_setStyles","element","positions","_inkBarPositioner","inkBar","left","width","NgZone","_MAT_INK_BAR_POSITIONER","MatTabLabel","templateRef","viewContainerRef","TemplateRef","CdkPortal","MatTabContent","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","textLabel","_contentPortal","_labelChange","Subject","_disableChange","position","origin","isActive","ngOnChanges","hasOwnProperty","complete","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","MatTabBodyPortal","componentFactoryResolver","_host","_centeringSub","Subscription","EMPTY","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","unsubscribe","ComponentFactoryResolver","MatTabBody","forwardRef","CdkPortalOutlet","_dir","changeDetectorRef","_dirChangeSubscription","_onCentering","EventEmitter","_onCentered","change","dir","_computePositionAnimationState","markForCheck","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","e","toState","emit","clientHeight","_onTranslateTabComplete","fromState","_getLayoutDirection","animations","ChangeDetectorRef","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","elementRef","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","[attr.aria-disabled]","MatTabHeaderBase","_MatTabHeaderMixinBase","mixinDisableRipple","MatTabHeader","_changeDetectorRef","_viewportRuler","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","ngAfterContentChecked","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","event","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","dirChange","observableOf","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","requestAnimationFrame","takeUntil","newFocusIndex","_setTabFocus","_onContentChanges","_checkPaginationEnabled","_isValidIndex","setActiveItem","tab","toArray","disabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","Math","max","min","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","MatTabGroup","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","_backgroundColor","classList","remove","backgroundColor","add","indexToSelect","_clampTabIndex","tabChangeEvent","_createChangeEvent","Promise","resolve","then","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","concat","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","_getTabIndex","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","updateActiveLink","_activeLinkChanged","runOutsideAngular","_alignInkBar","activeTab","_tabLinks","find","active","_activeLinkElement","show","MatTabLinkBase","_MatTabLinkMixinBase","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","_ripplesGloballyDisabled","terminateOnPointerUp","speedFactor","baseSpeedFactor","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","MAT_RIPPLE_GLOBAL_OPTIONS","FocusMonitor","PortalModule","MatRippleModule","ObserversModule","A11yModule","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","childNodes","filter","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","providedIn","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_sort","_cdkColumnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","_stateChanges","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","sort","direction","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","leftPointer","rightPointer","arrowOpacity","MatSort","CdkColumnDef","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_element","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MatStepper","arguments","icons","_icons","override","icon","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","aria-orientation","MatVerticalStepper","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","MatTable","stickyCssClass","CDK_TABLE_TEMPLATE","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatFooterCellDef","CdkFooterCellDef","MatColumnDef","sticky","stickyEnd","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatFooterCell","CdkFooterCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_paginator","paginator","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","InjectionToken","factory","_MAT_INK_BAR_POSITIONER_FACTORY","MatSlider","_vertical","displayWith","_roundToDecimal","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","_percent","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_invertMouseCoords","_thumbGap","_direction","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_isSliding","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","_calculatePercentage","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","matSnackBarAnimations","contentFade","opacity","AnimationDurations","COMPLEX","AnimationCurves","STANDARD_CURVE","snackBarState","EXITING","ACCELERATION_CURVE","ENTERING","DECELERATION_CURVE","SimpleSnackBar","snackBarRef","action","[@contentFade]","MatSnackBarContainer","snackBarConfig","_animationState","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","SORT_ANIMATION_TRANSITION","keyframes","MatDrawerContent","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMarginChanges","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","autosize","hasBackdrop","MatSidenavContent","[style.margin-left.px]","[style.margin-right.px]","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","MatSidenavContainer","MatSidenavModule","ScrollDispatchModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","onChange","_","_uniqueId","_required","_checked","_dragging","labelPosition","toggleChange","dragChange","_inputElement","focusOrigin","_onInputFocusChange","_onChangeEvent","_onInputClick","toggle","_focusRipple","fadeOut","_ripple","launch","persistent","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","MatRipple","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","toString","split","pop","parseFloat","Location","MatProgressBar","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_container","MatSelect","_calculateOverlayScroll","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","_selectionModel","options","first","group","leftOverflow","rightOverflow","updatePosition","_calculateOverlayOffsetY","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","_scrollTop","firstDisplayedIndex","_getItemCount","selectedDisplayIndex","partialItemHeight","_checkOverlayWithinViewport","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","_offsetY","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionGroups","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_panelOpen","empty","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","matSelectAnimations","transformPanel","fadeInContent","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","_scrollStrategy","_defaultOptions","showDelay","hideDelay","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","draggable","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","clear","delay","_detach","_portal","TooltipComponent","afterHidden","isVisible","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","scrollStrategy","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","ScrollDispatcher","AriaDescriber","_visibility","_closeOnInteraction","_onHide","_isHandset","_hideTimeoutId","_showTimeoutId","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","numberOfPages","_changePageSize","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","progressbarId","location","_bufferValue","_rectangleFillValue","path","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","_template","insertBefore","_outlet","outletElement","context","_attached","MatMenuContent","isAttached","ApplicationRef","matMenuAnimations","transformMenu","sequence","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","items","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","activeItemIndex","scrollTop","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_openedByMouse","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_checkMenu","reason","_destroyMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","asapScheduler","aria-haspopup","(mousedown)","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","_scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","option","onSelectionChange","o","valueAccessor","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","distinctUntilChanged","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","manager","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFadeInDone","_onAttached","positionChange","panel","_getPanelTheme","color","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","_getOptionScrollPosition","_getOptionIndex","result","current","panelHeight","scrollContainerHeight","selectedOptionOffset","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_componentFactoryResolver","_appRef","DomPortalOutlet","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","MatLineSetter","_lines","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","setNextItemActive","previousFocusIndex","_toggleSelectOnFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","Boolean","focusedOption","focusedIndex","hasChanged","_MatListMixinBase","_navList","_isNavList","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToNumber","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","setAttribute","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","styleTags","querySelectorAll","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","[class.mat-icon-inline]","MatListBase","MatListItemBase","_MatListItemMixinBase","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","MatDatepickerContent","_calendar","focusActiveCell","[@transformPanel]","[class.mat-datepicker-content-touch]","matDatepickerAnimations","_dateAdapter","createMissingDateImplError","MatDatepicker","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","date","sameDate","_selectedChanged","_datepickerInput","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","afterClosed","componentInstance","datepicker","_setColor","_createPopup","keydownEvents","withPush","MatDialog","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","target","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","registerDatepicker","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","_onInput","parse","_getThemePalette","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-datepicker-toggle-active]","[class.mat-accent]","[class.mat-warn]","_customIcon","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_inputChanges","_headerId","_getHideToggle","_hasSpacing","expanded","_getExpandedState","_lazyContent","_bodyAnimation","phaseName","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","CdkAccordionModule","MatExpansionModule","_colspan","property","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","firstChange","view","_getCurrentViewComponent","headerComponent","monthView","yearView","multiYearView","chips","chip","MatChipList","MatChipListChange","_blur","_chipInput","focused","_markAsTouched","_resetChips","_dropSubscriptions","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","_updateKeyManager","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","ariaOrientation","selectable","MatChip","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","addOnBlur","_focus","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","ɵ0","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","closeOnNavigation","matDialogAnimations","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogRef","_containerInstance","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_result","dialogResult","detachBackdrop","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","maxHeight","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","hasAttribute","getAttribute","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_isServer","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[required]","[readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","MatCard","MatCardHeader","MatCardTitleGroup","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","MatCardFooter","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardImage","MatCardXlImage","MatCardAvatar","MatCardModule","MAT_CHECKBOX_CLICK_ACTION","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","ripple","_onInteractionEvent","animSuffix","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","CHIP_ATTRIBUTE_NAMES_1","attr","tagName","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","_changeSubscription","_updateTabIndex","_updateFocusForDestroyedChips","inputElement","_focusInput","_isInputEmpty","chipsArray","focusChip","_clearSelection","correspondingChip","skip","MatButton","stopImmediatePropagation","MatAnchor","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","align","[class.mat-card-actions-align-end]","MatAutocomplete","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","optionSelected","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_closeKeyEventStream","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","showPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_outsideClickStream","MatOptionSelectionChange","fromEvent","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_getScrollTop","_setScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","_setVisibility","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","_emitSelectEvent","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","connectedTo","_getHostWidth","readOnly","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadge","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","DEFAULT_FLAT_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attributes","attribute","_parent","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","ngAfterViewChecked","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_outlineGapWidth","_outlineGapStart","_initialGapCalculated","_labelOptions","float","_animationsEnabled","_appearance","appearance","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","documentElement","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","_autoActiveFirstOption","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","defaultTabIndex","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","enforceStyleRecalculation","window","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","currentScrollPosition","optionHeight","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","defaultOptions","provider","exp","match","parentRegistry","httpClient","sanitizer","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","test","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","Hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","FADING_IN","_containerElement","containerRect","_containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]"],"mappings":"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"}