"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
class MissingFileReplacementException extends core_1.BaseException {
    constructor(path) {
        super(`The ${path} path in file replacements does not exist.`);
    }
}
exports.MissingFileReplacementException = MissingFileReplacementException;
function normalizeFileReplacements(fileReplacements, host, root) {
    if (fileReplacements.length === 0) {
        return rxjs_1.of([]);
    }
    // Ensure all the replacements exist.
    const errorOnFalse = (path) => operators_1.tap((exists) => {
        if (!exists) {
            throw new MissingFileReplacementException(core_1.getSystemPath(path));
        }
    });
    return rxjs_1.from(fileReplacements).pipe(operators_1.map(replacement => normalizeFileReplacement(replacement, root)), operators_1.concatMap(normalized => {
        return rxjs_1.from([normalized.replace, normalized.with]).pipe(operators_1.mergeMap(path => host.exists(path).pipe(errorOnFalse(path))), operators_1.ignoreElements(), operators_1.concat(rxjs_1.of(normalized)));
    }), operators_1.toArray());
}
exports.normalizeFileReplacements = normalizeFileReplacements;
function normalizeFileReplacement(fileReplacement, root) {
    const currentFormat = fileReplacement;
    const maybeOldFormat = fileReplacement;
    let replacePath;
    let withPath;
    if (maybeOldFormat.src && maybeOldFormat.replaceWith) {
        replacePath = core_1.normalize(maybeOldFormat.src);
        withPath = core_1.normalize(maybeOldFormat.replaceWith);
    }
    else {
        replacePath = core_1.normalize(currentFormat.replace);
        withPath = core_1.normalize(currentFormat.with);
    }
    // TODO: For 7.x should this only happen if not absolute?
    if (root) {
        replacePath = core_1.join(root, replacePath);
    }
    if (root) {
        withPath = core_1.join(root, withPath);
    }
    return { replace: replacePath, with: withPath };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsaXplLWZpbGUtcmVwbGFjZW1lbnRzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9idWlsZF9hbmd1bGFyL3NyYy91dGlscy9ub3JtYWxpemUtZmlsZS1yZXBsYWNlbWVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7R0FNRzs7QUFFSCwrQ0FPOEI7QUFDOUIsK0JBQTRDO0FBQzVDLDhDQUFnRztBQVFoRyxxQ0FBNkMsU0FBUSxvQkFBYTtJQUNoRSxZQUFZLElBQVk7UUFDdEIsS0FBSyxDQUFDLE9BQU8sSUFBSSw0Q0FBNEMsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Q0FDRjtBQUpELDBFQUlDO0FBT0QsbUNBQ0UsZ0JBQW1DLEVBQ25DLElBQW9CLEVBQ3BCLElBQVU7SUFFVixFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsU0FBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hCLENBQUM7SUFFRCxxQ0FBcUM7SUFDckMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxJQUFVLEVBQUUsRUFBRSxDQUFDLGVBQUcsQ0FBQyxDQUFDLE1BQWUsRUFBRSxFQUFFO1FBQzNELEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNaLE1BQU0sSUFBSSwrQkFBK0IsQ0FBQyxvQkFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDakUsQ0FBQztJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLFdBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FDaEMsZUFBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsd0JBQXdCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQy9ELHFCQUFTLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDckIsTUFBTSxDQUFDLFdBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNyRCxvQkFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDNUQsMEJBQWMsRUFBRSxFQUNoQixrQkFBTSxDQUFDLFNBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUN2QixDQUFDO0lBQ0osQ0FBQyxDQUFDLEVBQ0YsbUJBQU8sRUFBRSxDQUNWLENBQUM7QUFDSixDQUFDO0FBM0JELDhEQTJCQztBQUVELGtDQUNFLGVBQWdDLEVBQ2hDLElBQVc7SUFFWCxNQUFNLGFBQWEsR0FBRyxlQUF5QyxDQUFDO0lBQ2hFLE1BQU0sY0FBYyxHQUFHLGVBQTJDLENBQUM7SUFFbkUsSUFBSSxXQUFpQixDQUFDO0lBQ3RCLElBQUksUUFBYyxDQUFDO0lBQ25CLEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLElBQUksY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDckQsV0FBVyxHQUFHLGdCQUFTLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLFFBQVEsR0FBRyxnQkFBUyxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixXQUFXLEdBQUcsZ0JBQVMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0MsUUFBUSxHQUFHLGdCQUFTLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCx5REFBeUQ7SUFDekQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNULFdBQVcsR0FBRyxXQUFJLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ1QsUUFBUSxHQUFHLFdBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDO0FBQ2xELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7XG4gIEJhc2VFeGNlcHRpb24sXG4gIFBhdGgsXG4gIGdldFN5c3RlbVBhdGgsXG4gIGpvaW4sXG4gIG5vcm1hbGl6ZSxcbiAgdmlydHVhbEZzLFxufSBmcm9tICdAYW5ndWxhci1kZXZraXQvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY29uY2F0LCBjb25jYXRNYXAsIGlnbm9yZUVsZW1lbnRzLCBtYXAsIG1lcmdlTWFwLCB0YXAsIHRvQXJyYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICBDdXJyZW50RmlsZVJlcGxhY2VtZW50LFxuICBEZXByZWNhdGVkRmlsZVJlcGxhY21lbnQsXG4gIEZpbGVSZXBsYWNlbWVudCxcbn0gZnJvbSAnLi4vYnJvd3Nlci9zY2hlbWEnO1xuXG5cbmV4cG9ydCBjbGFzcyBNaXNzaW5nRmlsZVJlcGxhY2VtZW50RXhjZXB0aW9uIGV4dGVuZHMgQmFzZUV4Y2VwdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHBhdGg6IFN0cmluZykge1xuICAgIHN1cGVyKGBUaGUgJHtwYXRofSBwYXRoIGluIGZpbGUgcmVwbGFjZW1lbnRzIGRvZXMgbm90IGV4aXN0LmApO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTm9ybWFsaXplZEZpbGVSZXBsYWNlbWVudCB7XG4gIHJlcGxhY2U6IFBhdGg7XG4gIHdpdGg6IFBhdGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVGaWxlUmVwbGFjZW1lbnRzKFxuICBmaWxlUmVwbGFjZW1lbnRzOiBGaWxlUmVwbGFjZW1lbnRbXSxcbiAgaG9zdDogdmlydHVhbEZzLkhvc3QsXG4gIHJvb3Q6IFBhdGgsXG4pOiBPYnNlcnZhYmxlPE5vcm1hbGl6ZWRGaWxlUmVwbGFjZW1lbnRbXT4ge1xuICBpZiAoZmlsZVJlcGxhY2VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gb2YoW10pO1xuICB9XG5cbiAgLy8gRW5zdXJlIGFsbCB0aGUgcmVwbGFjZW1lbnRzIGV4aXN0LlxuICBjb25zdCBlcnJvck9uRmFsc2UgPSAocGF0aDogUGF0aCkgPT4gdGFwKChleGlzdHM6IGJvb2xlYW4pID0+IHtcbiAgICBpZiAoIWV4aXN0cykge1xuICAgICAgdGhyb3cgbmV3IE1pc3NpbmdGaWxlUmVwbGFjZW1lbnRFeGNlcHRpb24oZ2V0U3lzdGVtUGF0aChwYXRoKSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZnJvbShmaWxlUmVwbGFjZW1lbnRzKS5waXBlKFxuICAgIG1hcChyZXBsYWNlbWVudCA9PiBub3JtYWxpemVGaWxlUmVwbGFjZW1lbnQocmVwbGFjZW1lbnQsIHJvb3QpKSxcbiAgICBjb25jYXRNYXAobm9ybWFsaXplZCA9PiB7XG4gICAgICByZXR1cm4gZnJvbShbbm9ybWFsaXplZC5yZXBsYWNlLCBub3JtYWxpemVkLndpdGhdKS5waXBlKFxuICAgICAgICBtZXJnZU1hcChwYXRoID0+IGhvc3QuZXhpc3RzKHBhdGgpLnBpcGUoZXJyb3JPbkZhbHNlKHBhdGgpKSksXG4gICAgICAgIGlnbm9yZUVsZW1lbnRzKCksXG4gICAgICAgIGNvbmNhdChvZihub3JtYWxpemVkKSksXG4gICAgICApO1xuICAgIH0pLFxuICAgIHRvQXJyYXkoKSxcbiAgKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplRmlsZVJlcGxhY2VtZW50KFxuICBmaWxlUmVwbGFjZW1lbnQ6IEZpbGVSZXBsYWNlbWVudCxcbiAgcm9vdD86IFBhdGgsXG4pOiBOb3JtYWxpemVkRmlsZVJlcGxhY2VtZW50IHtcbiAgY29uc3QgY3VycmVudEZvcm1hdCA9IGZpbGVSZXBsYWNlbWVudCBhcyBDdXJyZW50RmlsZVJlcGxhY2VtZW50O1xuICBjb25zdCBtYXliZU9sZEZvcm1hdCA9IGZpbGVSZXBsYWNlbWVudCBhcyBEZXByZWNhdGVkRmlsZVJlcGxhY21lbnQ7XG5cbiAgbGV0IHJlcGxhY2VQYXRoOiBQYXRoO1xuICBsZXQgd2l0aFBhdGg6IFBhdGg7XG4gIGlmIChtYXliZU9sZEZvcm1hdC5zcmMgJiYgbWF5YmVPbGRGb3JtYXQucmVwbGFjZVdpdGgpIHtcbiAgICByZXBsYWNlUGF0aCA9IG5vcm1hbGl6ZShtYXliZU9sZEZvcm1hdC5zcmMpO1xuICAgIHdpdGhQYXRoID0gbm9ybWFsaXplKG1heWJlT2xkRm9ybWF0LnJlcGxhY2VXaXRoKTtcbiAgfSBlbHNlIHtcbiAgICByZXBsYWNlUGF0aCA9IG5vcm1hbGl6ZShjdXJyZW50Rm9ybWF0LnJlcGxhY2UpO1xuICAgIHdpdGhQYXRoID0gbm9ybWFsaXplKGN1cnJlbnRGb3JtYXQud2l0aCk7XG4gIH1cblxuICAvLyBUT0RPOiBGb3IgNy54IHNob3VsZCB0aGlzIG9ubHkgaGFwcGVuIGlmIG5vdCBhYnNvbHV0ZT9cbiAgaWYgKHJvb3QpIHtcbiAgICByZXBsYWNlUGF0aCA9IGpvaW4ocm9vdCwgcmVwbGFjZVBhdGgpO1xuICB9XG4gIGlmIChyb290KSB7XG4gICAgd2l0aFBhdGggPSBqb2luKHJvb3QsIHdpdGhQYXRoKTtcbiAgfVxuXG4gIHJldHVybiB7IHJlcGxhY2U6IHJlcGxhY2VQYXRoLCB3aXRoOiB3aXRoUGF0aCB9O1xufVxuIl19